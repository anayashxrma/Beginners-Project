import java.util.Arrays;

public class SortingComparison {

    public static void main(String[] args) {
        int[] arr = {64, 34, 25, 12, 22, 11, 90};

        int[] arrBubbleSort = arr.clone();
        int[] arrSelectionSort = arr.clone();
        int[] arrQuickSort = arr.clone();
        int[] arrMergeSort = arr.clone();

        long startTime, endTime, duration;

//BUBBLE SORT
        startTime = System.nanoTime();
        bubbleSort(arrBubbleSort);
        endTime = System.nanoTime();
        duration = (endTime - startTime) / 1000; // Convert to microseconds
        System.out.println("Bubble Sort Time: " + duration + " microseconds");
        System.out.println("Sorted Array (Bubble Sort): " + Arrays.toString(arrBubbleSort));

//SELECTION SORT
        startTime = System.nanoTime();
        selectionSort(arrSelectionSort);
        endTime = System.nanoTime();
        duration = (endTime - startTime) / 1000; // Convert to microseconds
        System.out.println("\nSelection Sort Time: " + duration + " microseconds");
        System.out.println("Sorted Array (Selection Sort): " + Arrays.toString(arrSelectionSort));

//QUICK SORT
        startTime = System.nanoTime();
        quickSort(arrQuickSort, 0, arrQuickSort.length - 1);
        endTime = System.nanoTime();
        duration = (endTime - startTime) / 1000; // Convert to microseconds
        System.out.println("\nQuick Sort Time: " + duration + " microseconds");
        System.out.println("Sorted Array (Quick Sort): " + Arrays.toString(arrQuickSort));

//MERGE SORT
        startTime = System.nanoTime();
        mergeSort(arrMergeSort, 0, arrMergeSort.length - 1);
        endTime = System.nanoTime();
        duration = (endTime - startTime) / 1000; // Convert to microseconds
        System.out.println("\nMerge Sort Time: " + duration + " microseconds");
        System.out.println("Sorted Array (Merge Sort): " + Arrays.toString(arrMergeSort));
    }

    // Bubble Sort
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // Swap arr[j] and arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    // Selection Sort
    public static void selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            // Swap arr[i] and arr[minIndex]
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }

    // Quick Sort
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);

            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;

                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // Merge Sort
    public static void mergeSort(int[] arr, int l, int r) {
        if (l < r) {
            // Find the middle point
            int m = l + (r - l) / 2;

            // Sort first and second halves
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);

            // Merge the sorted halves
            merge(arr, l, m, r);
        }
    }

    private static void merge(int[] arr, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; ++i) {
            L[i] = arr[l + i];
        }
        for (int j = 0; j < n2; ++j) {
            R[j] = arr[m + 1 + j];
        }

        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
}
